// Jenkinsfile
pipeline {
    agent any
    //this should be set in Jenkins as secrets and this will be the ID postgres-user
    environment {
        POSTGRES_USER = credentials('postgres-user')  // Use the ID of the secret
        POSTGRES_PASSWORD = credentials('postgres-password')
        POSTGRES_DB = credentials('postgres-db')
        POSTGRES_HPORT = credentials('postgres-hport')
        POSTGRES_CPORT = credentials('postgres-cport')
    }
    stages {
        stage('Run Terraform Command') {
            steps {
                echo 'Running Terraform command...'
                sh 'terraform init -input=false -chdir=terraform/CD_terraform'
                // Apply the Terraform configuration
                sh 'terraform apply -auto-approve -chdir=terraform/CD_terraform'
            }
        }
        script {
            def instanceDnsId = sh(script: 'terraform output -raw instance_dns_id', returnStdout: true).trim()
            def prodVMname = ""
            def prodVM_IP = ""
            echo "Instance DNS and ID: ${instanceDnsId}"
        }
        script {
            echo "Updating host in ansible hosts file"
            writeFile(file: 'hosts', text: "[ec2_instance]\n${instanceDnsId}")
        }        
        stage('Run Ansible Command') {
            steps {
                echo 'Configuring the prod vm...'
                // Running the Ansible playbook and passing the secret as a variable
                sh """
                    ansible-playbook -i hosts ansible/prodconfig.yaml \
                    --extra-vars "pguser=${POSTGRES_USER} postgres_user=postgres_user" \
                    --extra-vars "pgpass=${POSTGRES_PASSWORD} postgres_pass=postgres_pass" \
                    --extra-vars "pgdb=${POSTGRES_DB} postgres_db=postgres_db" \
                    --extra-vars "hport=${POSTGRES_HPORT} postgres_hport=postgres_hport" \
                    --extra-vars "cport=${POSTGRES_CPORT} postgres_cport=postgres_cport"   
                """
            }
        }
        stage('Run Ansible Playbook') {
            steps {
                script {
                    echo 'Deploying Docker containers with Compose...'
                    // Create the directory on the prod VM if it doesn't exist
                    sh """
                        ssh -o StrictHostKeyChecking=no ec2-user@${instanceDnsId} 'mkdir -p /opt/docker-compose'
                    """                    
                    echo 'Updating variables in deploying-compose file and copy over remote vm...'                       
                    sh 'scp -i your-ssh-key docker/2_DB-docker-compose.yml user@remote:/opt/docker-compose'
                    sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@${instanceDnsId} '
                            cd /opt/docker-compose && \
                            docker-compose pull && \
                            docker-compose up -d
                        '
                    """
                }
            }
        }
    }
}



        stage('Run CD Pipeline Vaslidation') {
            steps {
                echo 'Running check all files if exists'
                // Add your Terraform command here
                sh 'ls'
                sh 'ls ./tire3_WebApp'
                sh 'scp -V'
            }
        }
        stage('Run Docker Command') {
            steps {
                echo 'Running Docker command...'
                sh 'docker --version'
            }
        }