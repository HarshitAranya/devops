# ansible-playbook -i /path/to/custom/hosts jenkinsPlay.yaml
---
- name: Install and configure Jenkins master and slave
  hosts: prod_servers
  become: yes
  tasks:
    - name: Install yum-utils
      yum:
        name: yum-utils
        state: present

    - name: Update yum packages
      yum:
        name: '*'
        state: latest

    - name: Install Docker on Amazon Linux 2
      become: yes
      yum:
        name: docker
        state: present

    - name: Install dependencies
      yum:
        name:
          - curl
          - jq
        state: present

    - name: Download Docker Compose binary
      get_url:
        url: "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)"
        dest: /usr/local/bin/docker-compose
        mode: 'u+x'

    - name: Verify Docker Compose installation
      command: /usr/local/bin/docker-compose --version
      register: docker_compose_version
      changed_when: false

    - name: Display Docker Compose version
      debug:
        msg: "Docker Compose version is {{ docker_compose_version.stdout }}"
    
    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    # ctrating secret variables on remote vm
    - name: Create Docker secret for postgres_user
      community.docker.docker_secret:
        name: postgres_user
        data: "{{ pguser }}"
        state: present

    - name: Create Docker secret for postgres_pass
      community.docker.docker_secret:
        name: postgres_pass
        data: "{{ pgpass }}"
        state: present

    - name: Create Docker secret for postgres_db
      community.docker.docker_secret:
        name: postgres_db
        data: "{{ pgdb }}"
        state: present

    - name: Create Docker secret for postgres_hport
      community.docker.docker_secret:
        name: postgres_hport
        data: "{{ hport }}"
        state: present

    - name: Create Docker secret for postgres_cport
      community.docker.docker_secret:
        name: postgres_cport
        data: "{{ cport }}"
        state: present

    # Export Docker secrets as environment variables
    - name: Export POSTGRES_USER environment variable
      environment:
        POSTGRES_USER: "{{ lookup('pipe', 'cat /run/secrets/postgres_user') }}"

    - name: Export POSTGRES_PASSWORD environment variable
      environment:
        POSTGRES_PASSWORD: "{{ lookup('pipe', 'cat /run/secrets/postgres_password') }}"

    - name: Export POSTGRES_DB environment variable
      environment:
        POSTGRES_DB: "{{ lookup('pipe', 'cat /run/secrets/postgres_db') }}"

    - name: Export POSTGRES_HPORT environment variable
      environment:
        POSTGRES_HPORT: "{{ lookup('pipe', 'cat /run/secrets/postgres_hport') }}"

    - name: Export POSTGRES_CPORT environment variable
      environment:
        POSTGRES_CPORT: "{{ lookup('pipe', 'cat /run/secrets/postgres_cport') }}"

# export POSTGRES_USER=$(cat /run/secrets/postgres_user)
# export POSTGRES_PASSWORD=$(cat /run/secrets/postgres_password)
# export POSTGRES_DB=$(cat /run/secrets/postgres_db)
# export POSTGRES_HPORT=$(cat /run/secrets/postgres_hport)
# export POSTGRES_CPORT=$(cat /run/secrets/postgres_cport)

# # OR like this
# - name: Create Docker secret for postgres_user
#   shell: echo "{{ pguser }}" | docker secret create {{ postgres_user }} -
# - name: Create Docker secret for postgres_pass
#   shell: echo "{{ pgpass }}" | docker secret create {{ postgres_pass }} -
# - name: Create Docker secret for postgres_db
#   shell: echo "{{ pgdb }}" | docker secret create {{ postgres_db }} -
# - name: Create Docker secret for postgres_hport
#   shell: echo "{{ hport }}" | docker secret create {{ postgres_hport }} -
# - name: Create Docker secret for postgres_cport
#   shell: echo "{{ cport }}" | docker secret create {{ postgres_cport }} -
  
             

